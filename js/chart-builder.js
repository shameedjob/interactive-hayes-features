let features = `Feature,a,b,b͡d,b͡v,b͡β,c,c͡ç,d,d̠͡ɮ̠,d̪͡z̪,d̪͡ð,d̪͡ɮ̪,d͡z,d͡ɮ,d͡ʑ,d͡ʒ,e,f,g͡b,h,i,j,k,k+,k+͡x+,k̠,k̠͡x̠,k͡p,k͡x,l,m,n,o,p,p͡f,p͡t,p͡ɸ,q,q͡χ,r,s,t,t̠͡ɬ̠,t̪͡s̪,t̪͡ɬ̪,t̪͡θ,t͡s,t͡ɕ,t͡ɬ,t͡ʃ,u,v,w,x,x+,x̠,y,z,æ,ç,ð,ø,ħ,ŋ,ŋ+,ŋ˗,œ,ɉ,ɉ͡ʝ,ɑ,ɒ,ɔ,ɕ,ɖ,ɖ͡ʐ,ɘ,ə,ɚ,ɛ,ɞ,ɡ,ɡ+,ɡ+͡ɣ+,ɡ̠,ɡ̠̠͡ɣ̠,ɡ͡ɣ,ɢ,ɢ͡ʁ,ɣ,ɣ+,ɣ̠,ɤ,ɥ,ɦ,ɧ,ɨ,ɪ,ɫ,ɬ,ɭ,ɮ,ɯ,ɰ,ɰ̠,ɱ,ɲ,ɳ,ɴ,ɵ,ɶ,ɸ,ɹ,ɺ,ɻ,ɽ,ɾ,ʀ,ʁ,ʂ,ʃ,ʈ,ʈ͡ʂ,ʉ,ʊ,ʋ,ʌ,ʍ,ʎ,ʏ,ʐ,ʑ,ʒ,ʔ,ʕ,ʙ,ʝ,ʟ,ʟ̠,β,θ,χ
CORONAL,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,1,0,1,1,1,0,0,0,1,0,0,0,1,0
DORSAL,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,1,1,1,1,0,1,0,0,1,0,1,1,1,0,0,1
LABIAL,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0
anterior,,,1,,,0,0,1,0,1,1,1,1,1,1,0,,,,,,,,,,,,,,1,,1,,,,1,,,,1,1,1,0,1,1,1,1,1,1,0,,,,,,,,1,,0,1,,,,,,,0,0,,,,1,0,0,,,0,,,,,,,,,,,,,,,,,0,,,1,1,0,1,,,,,0,0,,,,,0,1,0,0,1,,,0,0,0,0,,,,,,0,,0,1,0,,,,0,,,,1,
approximant,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,1,1,0,0,0,0,0,1,0,1,1,0,0,0
back,0,,,,,0,0,,,,,,,,0,,0,,,,0,0,,0,0,1,1,,,,,,1,,,,,1,1,,,,,,,,,0,,,1,,1,,0,1,0,,0,0,,0,1,,0,1,0,0,0,1,1,1,0,,,0,0,,0,0,,0,0,1,1,,1,1,,0,1,1,0,,,0,0,1,,,,1,,1,,0,,1,0,0,,,,,,,1,1,,,,,0,1,,1,1,0,0,,0,,,1,,0,0,1,,,1
consonantal,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,1,1,1,1,0,0,0,1,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1
constr gl,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
continuant,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1
delayed release,,0,0,1,1,0,1,0,1,1,1,1,1,1,1,1,,1,0,1,,,0,0,1,0,1,0,1,,,,,0,1,0,1,0,1,,1,0,1,1,1,1,1,1,1,1,,1,,1,1,1,,1,,1,1,,1,,,,,0,1,,,,1,0,1,,,,,,0,0,1,0,1,1,0,1,1,1,1,,,1,1,,,,1,,1,,,,,,,,,,1,,,,,,,1,1,1,0,1,,,,,1,,,1,1,1,0,0,,1,,,1,1,1
distributed,,,0,,,1,1,0,1,1,1,1,0,0,1,1,,,,,,,,,,,,,,0,,0,,,,0,,,,0,0,0,1,1,1,1,0,1,0,1,,,,,,,,0,,1,1,,,,,,,1,1,,,,1,0,0,,,1,,,,,,,,,,,,,,,,,1,,,0,0,0,0,,,,,1,0,,,,,1,0,0,0,0,,,0,1,0,0,,,,,,1,,0,1,1,,,,1,,,,1,
front,0,,,,,1,1,,,,,,,,1,,1,,,,1,1,,1,1,0,0,,,,,,0,,,,,0,0,,,,,,,,,1,,,0,,0,,1,0,1,,1,1,,1,0,,1,0,1,1,1,0,0,0,1,,,0,0,,1,0,,1,1,0,0,,0,0,,1,0,0,1,,,0,1,0,,,,0,,0,,1,,0,0,1,,,,,,,0,0,,,,,0,0,,0,0,1,1,,1,,,0,,1,1,0,,,0
high,0,,,,,1,1,,,,,,,,1,,0,,1,,1,1,1,1,1,1,1,1,1,,,,0,,,,,0,0,,,,,,,,,1,,,1,,1,1,1,1,1,,0,1,,0,0,1,1,1,0,1,1,0,0,0,1,,,0,0,,0,0,1,1,1,1,1,1,0,0,1,1,1,0,1,,1,1,1,0,,,,1,1,1,,1,,0,0,0,,,,,,,0,0,,,,,1,1,,0,1,1,1,,1,,,0,,1,1,1,,,0
labiodental,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
lateral,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0
long,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
low,1,,,,,0,0,,,,,,,,0,,0,,0,,0,0,0,0,0,0,0,0,0,,,,0,,,,,0,0,,,,,,,,,0,,,0,,0,0,0,0,0,,1,0,,0,1,0,0,0,0,0,0,1,1,0,0,,,0,0,,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,0,,,,0,0,0,,0,,0,0,1,,,,,,,0,0,,,,,0,0,,0,0,0,0,,0,,,1,,0,0,0,,,0
nasal,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
round,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0
sonorant,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,1,0,1,1,1,1,0,0,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,1,1,0,0,0,0,0,1,0,1,1,0,0,0
spread gl,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
stress,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
strident,,,1,,,0,0,0,0,1,0,0,1,0,1,1,,,,,,,,,,,,,,0,,0,,,,1,,,,0,1,0,0,1,0,0,1,1,0,1,,,,,,,,1,,0,0,,,,,,,0,0,,,,1,0,1,,,0,,,,,,,,,,,,,,,,,1,,,0,0,0,0,,,,,0,0,,,,,0,0,0,0,0,,,1,1,0,1,,,,,,0,,1,1,1,,,,0,,,,0,
syllabic,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
tap,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
tense,,,,,,,,,,,,,,,,,1,,,,1,1,,,,,,,,,,,1,,,,,,,,,,,,,,,,,,1,,1,,,,1,,,,,1,,,,,0,,,,,0,,,,1,0,,0,0,,,,,,,,,,,,1,1,,,1,0,,,,,1,1,1,,,,,1,,,,,,,,,,,,,,1,0,,0,1,,0,,,,,,,,,,,,
trill,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
voice,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,0`

let data = {}
let feature_data = {}
let selected_objects = [];
let segments_selected = false;

$(document).ready(()=>{
	processData(features)
})

function processData(allText) {
	var all_lines = allText.split(/\r\n|\n/);
	var header = all_lines[0].split(',');
	var table = $('<table id="feature-table-table"></table>');
	$("#output-type").change(update_matches);
	table.appendTo('#feature-table')
	var header_row = $('<tr id="header-row"></tr>');
	header_row.appendTo(table)
	for (let i = 0; i < header.length; i++){
		var header_segment = $(`<th class='segment-header' id='${i}_header'>`+header[i]+'</th>')
		header_segment.appendTo(header_row);
		if(i>0){
			data[header[i]] = ""
			header_segment.click(click_obj.bind(null, i, true));
		}
	}

	for (let i = 1; i < all_lines.length; i++){
		var table_row = $('<tr id="row-'+i+'"></tr>');
		table_row.appendTo(table)
		var row = all_lines[i].split(',');
		console.log(row[0])
		feature_data[row[0]] = Number("0b"+"0".repeat(i-1)+"1"+"0".repeat(all_lines.length-i-1))
		for (let j = 0; j < row.length; j++){
			var value = row[j];
			if (j>0){
				if (row[j]=="") {
					data[header[j]] += "X";
				}
				else if (Number(row[j])==1){
					value = "<input type='checkbox'"+((row[j]==1)?'checked':'')+' disabled>';
					data[header[j]] += "1";
				}
				else if(Number(row[j])==0){
					value = "<input type='checkbox'"+((row[j]==1)?'checked':'')+' disabled>';
					data[header[j]] += "0";
				}
				table_row.append('<td>'+value+'</td>');
			}
			else{
				var row_header = $(`<td id='${i}_row' class='segment-header'>${value}</td>`)
				row_header.click(click_obj.bind(null, i, false))
				row_header.appendTo(table_row)
			}
		}
	}
	for (let i = 1; i < header.length; i++){
		var tempData = data[header[i]]
		tempData = tempData.replaceAll("0", "-")
		tempData = tempData.replaceAll("1", "0")
		tempData = tempData.replaceAll("-", "1")
		tempData = "0b"+tempData.replaceAll("X", "0")
		console.log(tempData)
		data[header[i]] = [
			Number("0b"+data[header[i]].replaceAll("X", "0")),
			Number(tempData)
		]
	}
}

function find_match_feature(arr){
	var num = 0
	console.log(num)
	for(var i of arr){
		console.log(i)
		num = num | feature_data[i];
	}

	var ret = []
	for(var segment in data){
		if((num & data[segment][0]) == num){
			ret.push(segment)
		}
	}
	return ret;
}

function find_match_segment(arr){
	if (arr.length < 1) return [];

	var num = data[arr[0]][0]
	var neg = data[arr[0]][1]
	
	var ret = []
	console.log(num)
	console.log(neg)

	for(var i of arr){
		num = num & data[i][0]
		neg = neg & data[i][1]
	}
	var selection_value = Number($("#output-type").val());
	console.log($("#output-type").val())
	for(var feat in feature_data){
		if(selection_value != 1 && (num&feature_data[feat])==feature_data[feat]){
			ret.push("+"+feat)
		}
		if(selection_value > 0 && (neg&feature_data[feat])==feature_data[feat]){
			ret.push("-"+feat)
		}
	}

	return ret;
}

function click_obj(val, segment){
	var obj = $("#"+val+((segment)?"_header":"_row"));
	if (!obj.hasClass('selected')){
		if(segments_selected != segment){
			deselect_objects();
			segments_selected = segment;
		}
		obj.addClass('selected');
		selected_objects.push(val)
	}
	else{
		obj.removeClass('selected');
		selected_objects.splice(selected_objects.indexOf(val), 1);
	}
	console.log(val, segment)
	update_matches()
}

function deselect_objects(){
	for(var o of selected_objects){
		if (segments_selected){
			$("#"+o+"_header").toggleClass("selected", false);
		}
		else{
			$("#"+o+"_row").toggleClass("selected", false);
		}
	}
	selected_objects = []
}

function update_matches(){
	if(segments_selected){
		update_matches_segments();
	}
	else{
		update_matches_features();
	}
	console.log($('#selected'))
}

function update_matches_segments(){
	var keys = []
	for(var o of selected_objects){
		var key = Object.keys(data)[o-1];
		keys.push(key)
	}
	
	$("#selected").text(`Selected Segments: ${keys}`);
	$("#matches").text(find_match_segment(keys));
}

function update_matches_features(){
	var keys = []
	for(var o of selected_objects){
		var key = Object.keys(feature_data)[o-1];
		keys.push(key)
	}

	$("#selected").text(`Selected Features: ${keys}`);
	$("#matches").text(find_match_feature(keys));
}